
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class JFrame_Cliente extends javax.swing.JFrame {

    /**
     * @author Patrick
     * @throws java.rmi.RemoteException
     */
    public JFrame_Cliente() throws RemoteException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_Servidor = new javax.swing.JLabel();
        jLabel_Apelido = new javax.swing.JLabel();
        jButton_Conectar = new javax.swing.JButton();
        jTextField_EndServidor = new javax.swing.JTextField();
        jTextField_Apelido = new javax.swing.JTextField();
        jTextField_Mensagem = new javax.swing.JTextField();
        jButton_Enviar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea_Mensagens = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat Multicliente");

        jLabel_Servidor.setText("Servidor IP");

        jLabel_Apelido.setText("Apelido");

        jButton_Conectar.setText("Conectar");
        jButton_Conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ConectarActionPerformed(evt);
            }
        });

        jButton_Enviar.setText("Enviar");
        jButton_Enviar.setEnabled(false);
        jButton_Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EnviarActionPerformed(evt);
            }
        });

        jTextArea_Mensagens.setEditable(false);
        jTextArea_Mensagens.setColumns(20);
        jTextArea_Mensagens.setRows(5);
        jScrollPane2.setViewportView(jTextArea_Mensagens);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_Servidor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_EndServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel_Apelido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_Apelido, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_Conectar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField_Mensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_Enviar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_Servidor)
                    .addComponent(jTextField_EndServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Apelido)
                    .addComponent(jTextField_Apelido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Conectar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_Mensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Enviar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ConectarActionPerformed
        servidor = jTextField_EndServidor.getText();
        apelido = jTextField_Apelido.getText();

        if (servidor.isEmpty() || apelido.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Alguns dos campos podem estar em branco");
        } else {
            try {
                chat = (IChat) Naming.lookup("rmi://" + servidor + "/Chat");
                jTextArea_Mensagens.append("Realizando conexão com o servidor...sucesso\n\n");
                jButton_Enviar.setEnabled(true);
                listaMensagens.addAll(chat.lerMensagem());
                //JOptionPane.showMessageDialog(null,listaMensagens.size());
                jTextField_Mensagem.requestFocus();
                new Thread() {
                    public void run() {
                        do {
                            try {
                                //se a lista local ao cliente for menor que a do servidor... 
                                //entao atualizar a lista local e o jTextArea_Mensagens
                                if (chat.lerMensagem().size() > listaMensagens.size()) {
                                    jTextArea_Mensagens.setText("");
                                    listaMensagens.clear();
                                    for (Iterator<String> iterator = chat.lerMensagem().iterator(); iterator.hasNext();) {
                                        String f = iterator.next();
                                        jTextArea_Mensagens.append(f + "\n");
                                        listaMensagens.add(f);
                                    }
                                }
                                Thread.sleep(2000);
                            }catch (RemoteException ex) {
                                Logger.getLogger(JFrame_Cliente.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(JFrame_Cliente.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            
                        }while (true);
                    }
                }.start();
                jButton_Conectar.setEnabled(false);
            } catch (MalformedURLException | NotBoundException |  RemoteException e ) {
                JOptionPane.showMessageDialog(null, "Um erro aconteceu na conexão com o servidor");
            }
        }
    }//GEN-LAST:event_jButton_ConectarActionPerformed

    private void jButton_EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EnviarActionPerformed
        // TODO add your handling code here:
        frase = jTextField_Mensagem.getText();
        if (!frase.isEmpty()) {
            try {
                chat.receberMensagem(apelido + ": " + frase);
                jTextField_Mensagem.setText("");
                //jTextArea_Mensagens.append(apelido + ": " + chat.lerMensagem().getLast() + "\n");
            } catch (RemoteException ex) {
            }
        }
    }//GEN-LAST:event_jButton_EnviarActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JFrame_Cliente().setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrame_Cliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    IChat chat;
    String servidor;
    String apelido;
    String frase;
    LinkedList<String> listaMensagens = new LinkedList<String>();
    Thread thread;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Conectar;
    private javax.swing.JButton jButton_Enviar;
    private javax.swing.JLabel jLabel_Apelido;
    private javax.swing.JLabel jLabel_Servidor;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea jTextArea_Mensagens;
    public javax.swing.JTextField jTextField_Apelido;
    public javax.swing.JTextField jTextField_EndServidor;
    public javax.swing.JTextField jTextField_Mensagem;
    // End of variables declaration//GEN-END:variables
}
